package machine

import machine.Alphabet._

sealed trait Move

case object Left extends Move
case object Right extends Move

case class Transformation(write: Symbol, move: Move, endingState: State)

object Transformations {

  private val lookupTable: Map[(State, Symbol), Transformation] = Map(
    (GoToEndToPrintInitialStateAndEmptyCell, a) -> Transformation(a, Right, GoToEndToPrintInitialStateAndEmptyCell),
    (GoToEndToPrintInitialStateAndEmptyCell, I) -> Transformation(I, Right, GoToEndToPrintInitialStateAndEmptyCell),
    (GoToEndToPrintInitialStateAndEmptyCell, O) -> Transformation(O, Right, GoToEndToPrintInitialStateAndEmptyCell),
    (GoToEndToPrintInitialStateAndEmptyCell, Empty) -> Transformation(Empty, Right, GoToEndToPrintInitialStateAndEmptyCell),
    (GoToEndToPrintInitialStateAndEmptyCell, Semicolon) -> Transformation(Semicolon, Right, GoToEndToPrintInitialStateAndEmptyCell),
    (GoToEndToPrintInitialStateAndEmptyCell, Colon) -> Transformation(Colon, Right, GoToEndToPrintInitialStateAndEmptyCell),
    (GoToEndToPrintInitialStateAndEmptyCell, Tilde) -> Transformation(Tilde, Right, GoToEndToPrintInitialStateAndEmptyCell),
    (GoToEndToPrintInitialStateAndEmptyCell, z) -> Transformation(Colon, Right, PrintingColonAfterInputF),
    (PrintingColonAfterInputF, z) -> Transformation(Empty, Right, PrintingInitialStateE),
    (PrintingInitialStateE, Empty) -> Transformation(I, Right, PrintingInitialStateF),
    (PrintingInitialStateF, Empty) -> Transformation(Empty, Right, PrintingInitialStateEndColonE),
    (PrintingInitialStateEndColonE, Empty) -> Transformation(Colon, Right, PrintingInitialStateEndColonF),
    (PrintingInitialStateEndColonF, Empty) -> Transformation(Empty, Right, PrintingFirstEmptyVirtualCellE),
    (PrintingFirstEmptyVirtualCellE, Empty) -> Transformation(Empty, Right, PrintingFirstEmptyVirtualCellF),
    (PrintingFirstEmptyVirtualCellF, Empty) -> Transformation(Empty, Right, PrintingEndingAfterFirstEmptyVirtualCellE),
    (PrintingEndingAfterFirstEmptyVirtualCellE, Empty) -> Transformation(z, Right, PrintingEndingAfterFirstEmptyVirtualCellF),
    (PrintingEndingAfterFirstEmptyVirtualCellF, Empty) -> Transformation(z, Left, GoToStartOfInput),
    (GoToStartOfInput, z) -> Transformation(z, Left, GoToStartOfInput),
    (GoToStartOfInput, I) -> Transformation(I, Left, GoToStartOfInput),
    (GoToStartOfInput, O) -> Transformation(O, Left, GoToStartOfInput),
    (GoToStartOfInput, Empty) -> Transformation(Empty, Left, GoToStartOfInput),
    (GoToStartOfInput, Colon) -> Transformation(Colon, Left, GoToStartOfInput),
    (GoToStartOfInput, Tilde) -> Transformation(Tilde, Right, FoundBeginningOfInput_E),
    (FoundBeginningOfInput_E, Empty) -> Transformation(Empty, Right, FoundBeginningOfInput_F),
    (FoundBeginningOfInput_F, Empty) -> Transformation(Empty, Right, FoundBeginningOfInput_F),

    // Printing zero-length input
    (FoundBeginningOfInput_F, Colon) -> Transformation(Colon, Right, FoundZeroLengthInput),
    (FoundZeroLengthInput, Empty) -> Transformation(Empty, Right, FoundZeroLengthInput),
    (FoundZeroLengthInput, O) -> Transformation(O, Right, FoundZeroLengthInput),
    (FoundZeroLengthInput, I) -> Transformation(I, Right, FoundZeroLengthInput),
    (FoundZeroLengthInput, Colon) -> Transformation(Colon, Right, FoundZeroLengthInput),
    (FoundZeroLengthInput, z) -> Transformation(Empty, Right, PrintingZeroLengthInputScannedVirtualCell_F),
    (PrintingZeroLengthInputScannedVirtualCell_F, z) -> Transformation(h, Right, PrintingTrailingVirtualHeadBufferE),
    (PrintingTrailingVirtualHeadBufferE, Empty) -> Transformation(Empty, Right, PrintingTrailingVirtualHeadBuffer),
    (PrintingTrailingVirtualHeadBuffer, Empty) -> Transformation(Empty, Right, FinishPrintingInput_Firstz),
    (FinishPrintingInput_Firstz, Empty) -> Transformation(z, Right, FinishPrintingInput_Secondz),
    (FinishPrintingInput_Secondz, Empty) -> Transformation(z, Left, FindRulesMatchingCurrentVirtualState),

    // First cell of input is 0
    (FoundBeginningOfInput_F, O) -> Transformation(O, Right, MarkFirstInputSymbol_0),
    (MarkFirstInputSymbol_0, Empty) -> Transformation(x, Right, GoToPrintFirstInputSymbol_0),
    (GoToPrintFirstInputSymbol_0, Empty) -> Transformation(Empty, Right, GoToPrintFirstInputSymbol_0),
    (GoToPrintFirstInputSymbol_0, O) -> Transformation(O, Right, GoToPrintFirstInputSymbol_0),
    (GoToPrintFirstInputSymbol_0, I) -> Transformation(I, Right, GoToPrintFirstInputSymbol_0),
    (GoToPrintFirstInputSymbol_0, Colon) -> Transformation(Colon, Right, GoToPrintFirstInputSymbol_0),
    (GoToPrintFirstInputSymbol_0, z) -> Transformation(O, Right, MarkInitialVirtualHeadPosition),
    (MarkInitialVirtualHeadPosition, z) -> Transformation(h, Right, FinishCopyingInputSymbol_z_E),
    (FinishCopyingInputSymbol_z_E, Empty) -> Transformation(z, Right, FinishCopyingInputSymbol_z_F),
    (FinishCopyingInputSymbol_z_F, Empty) -> Transformation(z, Left, ReturnForNextInputSymbol),

    // First cell of input is 1
    (FoundBeginningOfInput_F, I) -> Transformation(I, Right, MarkFirstInputSymbol_1),
    (MarkFirstInputSymbol_1, Empty) -> Transformation(x, Right, GoToPrintFirstInputSymbol_1),
    (GoToPrintFirstInputSymbol_1, Empty) -> Transformation(Empty, Right, GoToPrintFirstInputSymbol_1),
    (GoToPrintFirstInputSymbol_1, O) -> Transformation(O, Right, GoToPrintFirstInputSymbol_1),
    (GoToPrintFirstInputSymbol_1, I) -> Transformation(I, Right, GoToPrintFirstInputSymbol_1),
    (GoToPrintFirstInputSymbol_1, Colon) -> Transformation(Colon, Right, GoToPrintFirstInputSymbol_1),
    (GoToPrintFirstInputSymbol_1, z) -> Transformation(I, Right, MarkInitialVirtualHeadPosition),
    (MarkInitialVirtualHeadPosition, z) -> Transformation(h, Right, FinishCopyingInputSymbol_z_E),
    (FinishCopyingInputSymbol_z_E, Empty) -> Transformation(z, Right, FinishCopyingInputSymbol_z_F),
    (FinishCopyingInputSymbol_z_F, Empty) -> Transformation(z, Left, ReturnForNextInputSymbol),

    // First cell of input is empty
    (FoundBeginningOfInput_F, Empty) -> Transformation(Empty, Right, MarkFirstInputSymbol_Empty),
    (MarkFirstInputSymbol_Empty, Empty) -> Transformation(x, Right, GoToPrintFirstInputSymbol_Empty),
    (GoToPrintFirstInputSymbol_Empty, Empty) -> Transformation(Empty, Right, GoToPrintFirstInputSymbol_Empty),
    (GoToPrintFirstInputSymbol_Empty, O) -> Transformation(O, Right, GoToPrintFirstInputSymbol_Empty),
    (GoToPrintFirstInputSymbol_Empty, I) -> Transformation(I, Right, GoToPrintFirstInputSymbol_Empty),
    (GoToPrintFirstInputSymbol_Empty, Colon) -> Transformation(Colon, Right, GoToPrintFirstInputSymbol_Empty),
    (GoToPrintFirstInputSymbol_Empty, z) -> Transformation(Empty, Right, MarkInitialVirtualHeadPosition),
    (MarkInitialVirtualHeadPosition, z) -> Transformation(h, Right, FinishCopyingInputSymbol_z_E),
    (FinishCopyingInputSymbol_z_E, Empty) -> Transformation(z, Right, FinishCopyingInputSymbol_z_F),
    (FinishCopyingInputSymbol_z_F, Empty) -> Transformation(z, Left, ReturnForNextInputSymbol),

    // Get next input symbol
    (ReturnForNextInputSymbol, z) -> Transformation(z, Left, ReturnForNextInputSymbol),
    (ReturnForNextInputSymbol, O) -> Transformation(O, Left, ReturnForNextInputSymbol),
    (ReturnForNextInputSymbol, I) -> Transformation(I, Left, ReturnForNextInputSymbol),
    (ReturnForNextInputSymbol, Empty) -> Transformation(Empty, Left, ReturnForNextInputSymbol),
    (ReturnForNextInputSymbol, h) -> Transformation(h, Left, ReturnForNextInputSymbol),
    (ReturnForNextInputSymbol, Colon) -> Transformation(Colon, Left, ReturnForNextInputSymbol),
    (ReturnForNextInputSymbol, x) -> Transformation(Empty, Right, GetNextInputSymbol),

    // Go to print 0
    (GetNextInputSymbol, O) -> Transformation(O, Right, MarkNextInputSymbol_0),
    (MarkNextInputSymbol_0, Empty) -> Transformation(x, Right, GoToPrintNextInputSymbol_0),
    (GoToPrintNextInputSymbol_0, O) -> Transformation(O, Right, GoToPrintNextInputSymbol_0),
    (GoToPrintNextInputSymbol_0, I) -> Transformation(I, Right, GoToPrintNextInputSymbol_0),
    (GoToPrintNextInputSymbol_0, Empty) -> Transformation(Empty, Right, GoToPrintNextInputSymbol_0),
    (GoToPrintNextInputSymbol_0, h) -> Transformation(h, Right, GoToPrintNextInputSymbol_0),
    (GoToPrintNextInputSymbol_0, Colon) -> Transformation(Colon, Right, GoToPrintNextInputSymbol_0),
    (GoToPrintNextInputSymbol_0, z) -> Transformation(O, Right, PrintNextInputSymbol_0_F),
    (PrintNextInputSymbol_0_F, z) -> Transformation(Empty, Right, FinishCopyingInputSymbol_z_E),
    (FinishCopyingInputSymbol_z_E, Empty) -> Transformation(z, Right, FinishCopyingInputSymbol_z_F),
    (FinishCopyingInputSymbol_z_F, Empty) -> Transformation(z, Left, ReturnForNextInputSymbol),

    // Go to print 1
    (GetNextInputSymbol, I) -> Transformation(I, Right, MarkNextInputSymbol_1),
    (MarkNextInputSymbol_1, Empty) -> Transformation(x, Right, GoToPrintNextInputSymbol_1),
    (GoToPrintNextInputSymbol_1, O) -> Transformation(O, Right, GoToPrintNextInputSymbol_1),
    (GoToPrintNextInputSymbol_1, I) -> Transformation(I, Right, GoToPrintNextInputSymbol_1),
    (GoToPrintNextInputSymbol_1, Empty) -> Transformation(Empty, Right, GoToPrintNextInputSymbol_1),
    (GoToPrintNextInputSymbol_1, h) -> Transformation(h, Right, GoToPrintNextInputSymbol_1),
    (GoToPrintNextInputSymbol_1, Colon) -> Transformation(Colon, Right, GoToPrintNextInputSymbol_1),
    (GoToPrintNextInputSymbol_1, z) -> Transformation(I, Right, PrintNextInputSymbol_1_F),
    (PrintNextInputSymbol_1_F, z) -> Transformation(Empty, Right, FinishCopyingInputSymbol_z_E),
    (FinishCopyingInputSymbol_z_E, Empty) -> Transformation(z, Right, FinishCopyingInputSymbol_z_F),
    (FinishCopyingInputSymbol_z_F, Empty) -> Transformation(z, Left, ReturnForNextInputSymbol),

    // Go to print Empty
    (GetNextInputSymbol, Empty) -> Transformation(Empty, Right, MarkNextInputSymbol_Empty),
    (MarkNextInputSymbol_Empty, Empty) -> Transformation(x, Right, GoToPrintNextInputSymbol_Empty),
    (GoToPrintNextInputSymbol_Empty, O) -> Transformation(O, Right, GoToPrintNextInputSymbol_Empty),
    (GoToPrintNextInputSymbol_Empty, I) -> Transformation(I, Right, GoToPrintNextInputSymbol_Empty),
    (GoToPrintNextInputSymbol_Empty, Empty) -> Transformation(Empty, Right, GoToPrintNextInputSymbol_Empty),
    (GoToPrintNextInputSymbol_Empty, h) -> Transformation(h, Right, GoToPrintNextInputSymbol_Empty),
    (GoToPrintNextInputSymbol_Empty, Colon) -> Transformation(Colon, Right, GoToPrintNextInputSymbol_Empty),
    (GoToPrintNextInputSymbol_Empty, z) -> Transformation(I, Right, PrintNextInputSymbol_Empty_F),
    (PrintNextInputSymbol_Empty_F, z) -> Transformation(Empty, Right, FinishCopyingInputSymbol_z_E),
    (FinishCopyingInputSymbol_z_E, Empty) -> Transformation(z, Right, FinishCopyingInputSymbol_z_F),
    (FinishCopyingInputSymbol_z_F, Empty) -> Transformation(z, Left, ReturnForNextInputSymbol),

    // Ending copying of input
    (GetNextInputSymbol, Colon) -> Transformation(Colon, Right, CheckIfNeedToAddHeaderBuffer),
    (CheckIfNeedToAddHeaderBuffer, O) -> Transformation(O, Right, CheckIfNeedToAddHeaderBuffer),
    (CheckIfNeedToAddHeaderBuffer, I) -> Transformation(I, Right, CheckIfNeedToAddHeaderBuffer),
    (CheckIfNeedToAddHeaderBuffer, Empty) -> Transformation(Empty, Right, CheckIfNeedToAddHeaderBuffer),
    (CheckIfNeedToAddHeaderBuffer, Colon) -> Transformation(Colon, Right, CheckIfNeedToAddHeaderBuffer),
    (CheckIfNeedToAddHeaderBuffer, h) -> Transformation(h, Right, CheckIfNextCellContainsz),
    (CheckIfNextCellContainsz, O) -> Transformation(O, Left, FindRulesMatchingCurrentVirtualState),
    (CheckIfNextCellContainsz, I) -> Transformation(I, Left, FindRulesMatchingCurrentVirtualState),
    (CheckIfNextCellContainsz, Empty) -> Transformation(Empty, Left, FindRulesMatchingCurrentVirtualState),
    (CheckIfNextCellContainsz, z) -> Transformation(Empty, Right, PrintingTrailingVirtualHeadBuffer),
    (PrintingTrailingVirtualHeadBuffer, z) -> Transformation(Empty, Right, FinishPrintingInput_Firstz),
    (FinishPrintingInput_Firstz, Empty) -> Transformation(z, Right, FinishPrintingInput_Secondz),
    (FinishPrintingInput_Secondz, Empty) -> Transformation(z, Left, FindRulesMatchingCurrentVirtualState),

    //  Find current state
    (FindRulesMatchingCurrentVirtualState, O) -> Transformation(O, Left, FindCurrentVirtualState_VirtualTapeSection),
    (FindRulesMatchingCurrentVirtualState, I) -> Transformation(I, Left, FindCurrentVirtualState_VirtualTapeSection),
    (FindRulesMatchingCurrentVirtualState, Empty) -> Transformation(Empty, Left, FindCurrentVirtualState_VirtualTapeSection),
    (FindRulesMatchingCurrentVirtualState, z) -> Transformation(z, Left, FindCurrentVirtualState_VirtualTapeSection),
    (FindRulesMatchingCurrentVirtualState, h) -> Transformation(h, Left, FindCurrentVirtualState_VirtualTapeSection),
    (FindCurrentVirtualState_VirtualTapeSection, O) -> Transformation(O, Left, FindCurrentVirtualState_VirtualTapeSection),
    (FindCurrentVirtualState_VirtualTapeSection, I) -> Transformation(I, Left, FindCurrentVirtualState_VirtualTapeSection),
    (FindCurrentVirtualState_VirtualTapeSection, Empty) -> Transformation(Empty, Left, FindCurrentVirtualState_VirtualTapeSection),
    (FindCurrentVirtualState_VirtualTapeSection, z) -> Transformation(z, Left, FindCurrentVirtualState_VirtualTapeSection),
    (FindCurrentVirtualState_VirtualTapeSection, h) -> Transformation(h, Left, FindCurrentVirtualState_VirtualTapeSection),
    (FindCurrentVirtualState_VirtualTapeSection, Colon) -> Transformation(Colon, Left, FindCurrentVirtualState_GoToVirtualStateStart),
    (FindCurrentVirtualState_GoToVirtualStateStart, I) -> Transformation(I, Left, FindCurrentVirtualState_GoToVirtualStateStart),
    (FindCurrentVirtualState_GoToVirtualStateStart, Empty) -> Transformation(Empty, Left, FindCurrentVirtualState_GoToVirtualStateStart),
    (FindCurrentVirtualState_GoToVirtualStateStart, Colon) -> Transformation(Colon, Right, CurrentVirtualState_FindFirst1),
    (CurrentVirtualState_FindFirst1, Empty) -> Transformation(Empty, Right, CurrentVirtualState_FindFirst1),
    (CurrentVirtualState_FindFirst1, I) -> Transformation(I, Right, CurrentVirtualState_MarkFirst1),
    (CurrentVirtualState_MarkFirst1, Empty) -> Transformation(x, Left, FindRuleBeginningStates_FindNextSemicolon),

    // Find beginning states
    (FindRuleBeginningStates_FindNextSemicolon, O) -> Transformation(O, Left, FindRuleBeginningStates_FindNextSemicolon),
    (FindRuleBeginningStates_FindNextSemicolon, I) -> Transformation(I, Left, FindRuleBeginningStates_FindNextSemicolon),
    (FindRuleBeginningStates_FindNextSemicolon, Empty) -> Transformation(Empty, Left, FindRuleBeginningStates_FindNextSemicolon),
    (FindRuleBeginningStates_FindNextSemicolon, Colon) -> Transformation(Colon, Left, FindRuleBeginningStates_FindNextSemicolon),
    (FindRuleBeginningStates_FindNextSemicolon, Tilde) -> Transformation(Tilde, Left, FindRuleBeginningStates_FindNextSemicolon),
    (FindRuleBeginningStates_FindNextSemicolon, Semicolon) -> Transformation(Semicolon, Right, FindRuleBeginningStates_GoingToFirst1),
    (FindRuleBeginningStates_GoingToFirst1, Empty) -> Transformation(Empty, Right, FindRuleBeginningStates_GoingToFirst1),
    (FindRuleBeginningStates_GoingToFirst1, I) -> Transformation(I, Right, FindRuleBeginningStates_MarkFirst1),
    (FindRuleBeginningStates_MarkFirst1, Empty) -> Transformation(x, Left, FindRuleBeginningStates_SkippingMarkedRule),
    (FindRuleBeginningStates_SkippingMarkedRule, I) -> Transformation(I, Left, FindRuleBeginningStates_SkippingMarkedRule),
    (FindRuleBeginningStates_SkippingMarkedRule, Empty) -> Transformation(Empty, Left, FindRuleBeginningStates_SkippingMarkedRule),
    (FindRuleBeginningStates_SkippingMarkedRule, Semicolon) -> Transformation(Semicolon, Left, FindRuleBeginningStates_FindNextSemicolon),
    (FindRuleBeginningStates_FindNextSemicolon, a) -> Transformation(a, Right, FindRuleBeginningStates_ReturnToCurrentState_RuleSection),

    // Go and get next state tally
    (FindRuleBeginningStates_ReturnToCurrentState_RuleSection, O) -> Transformation(O, Right, FindRuleBeginningStates_ReturnToCurrentState_RuleSection),
    (FindRuleBeginningStates_ReturnToCurrentState_RuleSection, I) -> Transformation(I, Right, FindRuleBeginningStates_ReturnToCurrentState_RuleSection),
    (FindRuleBeginningStates_ReturnToCurrentState_RuleSection, Empty) -> Transformation(Empty, Right, FindRuleBeginningStates_ReturnToCurrentState_RuleSection),
    (FindRuleBeginningStates_ReturnToCurrentState_RuleSection, x) -> Transformation(x, Right, FindRuleBeginningStates_ReturnToCurrentState_RuleSection),
    (FindRuleBeginningStates_ReturnToCurrentState_RuleSection, Semicolon) -> Transformation(Semicolon, Right, FindRuleBeginningStates_ReturnToCurrentState_RuleSection),
    (FindRuleBeginningStates_ReturnToCurrentState_RuleSection, Colon) -> Transformation(Colon, Right, FindRuleBeginningStates_ReturnToCurrentState_RuleSection),
    (FindRuleBeginningStates_ReturnToCurrentState_RuleSection, Tilde) -> Transformation(Tilde, Right, FindRuleBeginningStates_ReturnToCurrentState_NonRuleSection),
    (FindRuleBeginningStates_ReturnToCurrentState_NonRuleSection, O) -> Transformation(O, Right, FindRuleBeginningStates_ReturnToCurrentState_NonRuleSection),
    (FindRuleBeginningStates_ReturnToCurrentState_NonRuleSection, I) -> Transformation(I, Right, FindRuleBeginningStates_ReturnToCurrentState_NonRuleSection),
    (FindRuleBeginningStates_ReturnToCurrentState_NonRuleSection, Empty) -> Transformation(Empty, Right, FindRuleBeginningStates_ReturnToCurrentState_NonRuleSection),
    (FindRuleBeginningStates_ReturnToCurrentState_NonRuleSection, Colon) -> Transformation(Colon, Right, FindRuleBeginningStates_ReturnToCurrentState_NonRuleSection),
    (FindRuleBeginningStates_ReturnToCurrentState_NonRuleSection, x) -> Transformation(Empty, Right, GetNextCurrentStateTally),
    (GetNextCurrentStateTally, I) -> Transformation(I, Right, CurrentStateTally_MarkNext1),
    (CurrentStateTally_MarkNext1, Empty) -> Transformation(x, Left, MatchStateToBeginningRules_1_FindNextMark),
    (GetNextCurrentStateTally, Colon) -> Transformation(Colon, Left, CurrentStateTally_FinalMatch_FindNextMark),

    // Check beginning rules for matching ones
    (MatchStateToBeginningRules_1_FindNextMark, O) -> Transformation(O, Left, MatchStateToBeginningRules_1_FindNextMark),
    (MatchStateToBeginningRules_1_FindNextMark, I) -> Transformation(I, Left, MatchStateToBeginningRules_1_FindNextMark),
    (MatchStateToBeginningRules_1_FindNextMark, Empty) -> Transformation(Empty, Left, MatchStateToBeginningRules_1_FindNextMark),
    (MatchStateToBeginningRules_1_FindNextMark, Colon) -> Transformation(Colon, Left, MatchStateToBeginningRules_1_FindNextMark),
    (MatchStateToBeginningRules_1_FindNextMark, Tilde) -> Transformation(Tilde, Left, MatchStateToBeginningRules_1_FindNextMark),
    (MatchStateToBeginningRules_1_FindNextMark, Semicolon) -> Transformation(Semicolon, Left, MatchStateToBeginningRules_1_FindNextMark),
    (MatchStateToBeginningRules_1_FindNextMark, x) -> Transformation(Empty, Right, MatchStateToBeginningRules_1_CheckNextCell),
    (MatchStateToBeginningRules_1_CheckNextCell, I) -> Transformation(I, Right, MatchStateToBeginningRules_1_Mark),
    (MatchStateToBeginningRules_1_Mark, Empty) -> Transformation(x, Left, MatchStateToBeginningRules_1_FindNextMark),
    (MatchStateToBeginningRules_1_CheckNextCell, Colon) -> Transformation(Colon, Left, MatchStateToBeginningRules_1_FindNextMark),
    (MatchStateToBeginningRules_1_FindNextMark, a) -> Transformation(a, Right, FindRuleBeginningStates_ReturnToCurrentState_RuleSection),

    // Check beginning rules for matching colons
    (CurrentStateTally_FinalMatch_FindNextMark, O) -> Transformation(O, Left, CurrentStateTally_FinalMatch_FindNextMark),
    (CurrentStateTally_FinalMatch_FindNextMark, I) -> Transformation(I, Left, CurrentStateTally_FinalMatch_FindNextMark),
    (CurrentStateTally_FinalMatch_FindNextMark, Empty) -> Transformation(Empty, Left, CurrentStateTally_FinalMatch_FindNextMark),
    (CurrentStateTally_FinalMatch_FindNextMark, Colon) -> Transformation(Colon, Left, CurrentStateTally_FinalMatch_FindNextMark),
    (CurrentStateTally_FinalMatch_FindNextMark, Tilde) -> Transformation(Tilde, Left, CurrentStateTally_FinalMatch_FindNextMark),
    (CurrentStateTally_FinalMatch_FindNextMark, Semicolon) -> Transformation(Semicolon, Left, CurrentStateTally_FinalMatch_FindNextMark),
    (CurrentStateTally_FinalMatch_FindNextMark, x) -> Transformation(Empty, Right, CurrentStateTally_FinalMatch_CheckForColon),
    (CurrentStateTally_FinalMatch_CheckForColon, Colon) -> Transformation(Colon, Right, CurrentStateTally_FinalMatch_MarkColon),
    (CurrentStateTally_FinalMatch_MarkColon, Empty) -> Transformation(x, Left, CurrentStateTally_FinalMatch_FindNextMark),
    (CurrentStateTally_FinalMatch_CheckForColon, I) -> Transformation(I, Left, CurrentStateTally_FinalMatch_FindNextMark),
    (CurrentStateTally_FinalMatch_FindNextMark, a) -> Transformation(a, Right, GoToCurrentScannedVirtualCell),

    // Go to current scanned virtual cell
    (GoToCurrentScannedVirtualCell, O) -> Transformation(O, Right, GoToCurrentScannedVirtualCell),
    (GoToCurrentScannedVirtualCell, I) -> Transformation(I, Right, GoToCurrentScannedVirtualCell),
    (GoToCurrentScannedVirtualCell, Empty) -> Transformation(Empty, Right, GoToCurrentScannedVirtualCell),
    (GoToCurrentScannedVirtualCell, Colon) -> Transformation(Colon, Right, GoToCurrentScannedVirtualCell),
    (GoToCurrentScannedVirtualCell, Tilde) -> Transformation(Tilde, Right, GoToCurrentScannedVirtualCell),
    (GoToCurrentScannedVirtualCell, Semicolon) -> Transformation(Semicolon, Right, GoToCurrentScannedVirtualCell),
    (GoToCurrentScannedVirtualCell, x) -> Transformation(x, Right, GoToCurrentScannedVirtualCell),
    (GoToCurrentScannedVirtualCell, h) -> Transformation(h, Left, ReadCurrentScannedVirtualCell),

    // Current scanned virtual cell contains 1 - mark all relevant rules
    (ReadCurrentScannedVirtualCell, I) -> Transformation(I, Left, FindRelevantRulesForSymbol1_NonRuleSection),
    (FindRelevantRulesForSymbol1_NonRuleSection, O) -> Transformation(O, Left, FindRelevantRulesForSymbol1_NonRuleSection),
    (FindRelevantRulesForSymbol1_NonRuleSection, I) -> Transformation(I, Left, FindRelevantRulesForSymbol1_NonRuleSection),
    (FindRelevantRulesForSymbol1_NonRuleSection, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol1_NonRuleSection),
    (FindRelevantRulesForSymbol1_NonRuleSection, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbol1_NonRuleSection),
    (FindRelevantRulesForSymbol1_NonRuleSection, Tilde) -> Transformation(Tilde, Left, FindRelevantRulesForSymbol1_EndingState),
    (FindRelevantRulesForSymbol1_EndingState, I) -> Transformation(I, Left, FindRelevantRulesForSymbol1_EndingState),
    (FindRelevantRulesForSymbol1_EndingState, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol1_EndingState),
    (FindRelevantRulesForSymbol1_EndingState, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbol1_MovementInstruction),
    (FindRelevantRulesForSymbol1_MovementInstruction, O) -> Transformation(O, Left, FindRelevantRulesForSymbol1_MovementInstruction),
    (FindRelevantRulesForSymbol1_MovementInstruction, I) -> Transformation(I, Left, FindRelevantRulesForSymbol1_MovementInstruction),
    (FindRelevantRulesForSymbol1_MovementInstruction, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol1_MovementInstruction),
    (FindRelevantRulesForSymbol1_MovementInstruction, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbol1_NewSymbol),
    (FindRelevantRulesForSymbol1_NewSymbol, O) -> Transformation(O, Left, FindRelevantRulesForSymbol1_NewSymbol),
    (FindRelevantRulesForSymbol1_NewSymbol, I) -> Transformation(I, Left, FindRelevantRulesForSymbol1_NewSymbol),
    (FindRelevantRulesForSymbol1_NewSymbol, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol1_NewSymbol),
    (FindRelevantRulesForSymbol1_NewSymbol, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbol1_CheckBeginningSymbol_F),
    (FindRelevantRulesForSymbol1_CheckBeginningSymbol_F, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol1_CheckBeginningSymbol_E),
    (FindRelevantRulesForSymbol1_CheckBeginningSymbol_E, O) -> Transformation(O, Left, FindRelevantRulesForSymbol1_GoToNextRule),
    (FindRelevantRulesForSymbol1_CheckBeginningSymbol_E, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol1_GoToNextRule),
    (FindRelevantRulesForSymbol1_CheckBeginningSymbol_E, I) -> Transformation(I, Right, FindRelevantRulesForSymbol1_MarkMatchingSymbol),
    (FindRelevantRulesForSymbol1_MarkMatchingSymbol, Empty) -> Transformation(x, Left, FindRelevantRulesForSymbol1_GoToNextRule),
    (FindRelevantRulesForSymbol1_GoToNextRule, O) -> Transformation(O, Left, FindRelevantRulesForSymbol1_GoToNextRule),
    (FindRelevantRulesForSymbol1_GoToNextRule, I) -> Transformation(I, Left, FindRelevantRulesForSymbol1_GoToNextRule),
    (FindRelevantRulesForSymbol1_GoToNextRule, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol1_GoToNextRule),
    (FindRelevantRulesForSymbol1_GoToNextRule, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbol1_GoToNextRule),
    (FindRelevantRulesForSymbol1_GoToNextRule, x) -> Transformation(x, Left, FindRelevantRulesForSymbol1_GoToNextRule),
    (FindRelevantRulesForSymbol1_GoToNextRule, Semicolon) -> Transformation(Semicolon, Left, FindRelevantRulesForSymbol1_EndingState),
    (FindRelevantRulesForSymbol1_EndingState, a) -> Transformation(a, Right, FindApplicableRule),

    // Current scanned virtual cell contains O - mark all relevant rules
    (ReadCurrentScannedVirtualCell, O) -> Transformation(O, Left, FindRelevantRulesForSymbol0_NonRuleSection),
    (FindRelevantRulesForSymbol0_NonRuleSection, O) -> Transformation(O, Left, FindRelevantRulesForSymbol0_NonRuleSection),
    (FindRelevantRulesForSymbol0_NonRuleSection, I) -> Transformation(I, Left, FindRelevantRulesForSymbol0_NonRuleSection),
    (FindRelevantRulesForSymbol0_NonRuleSection, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol0_NonRuleSection),
    (FindRelevantRulesForSymbol0_NonRuleSection, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbol0_NonRuleSection),
    (FindRelevantRulesForSymbol0_NonRuleSection, Tilde) -> Transformation(Tilde, Left, FindRelevantRulesForSymbol0_EndingState),
    (FindRelevantRulesForSymbol0_EndingState, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol0_EndingState),
    (FindRelevantRulesForSymbol0_EndingState, I) -> Transformation(I, Left, FindRelevantRulesForSymbol0_EndingState),
    (FindRelevantRulesForSymbol0_EndingState, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbol0_MovementInstruction),
    (FindRelevantRulesForSymbol0_MovementInstruction, O) -> Transformation(O, Left, FindRelevantRulesForSymbol0_MovementInstruction),
    (FindRelevantRulesForSymbol0_MovementInstruction, I) -> Transformation(I, Left, FindRelevantRulesForSymbol0_MovementInstruction),
    (FindRelevantRulesForSymbol0_MovementInstruction, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol0_MovementInstruction),
    (FindRelevantRulesForSymbol0_MovementInstruction, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbol0_NewSymbol),
    (FindRelevantRulesForSymbol0_NewSymbol, O) -> Transformation(O, Left, FindRelevantRulesForSymbol0_NewSymbol),
    (FindRelevantRulesForSymbol0_NewSymbol, I) -> Transformation(I, Left, FindRelevantRulesForSymbol0_NewSymbol),
    (FindRelevantRulesForSymbol0_NewSymbol, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol0_NewSymbol),
    (FindRelevantRulesForSymbol0_NewSymbol, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbol0_CheckBeginningSymbol_F),
    (FindRelevantRulesForSymbol0_CheckBeginningSymbol_F, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol0_CheckBeginningSymbol_E),
    (FindRelevantRulesForSymbol0_CheckBeginningSymbol_E, I) -> Transformation(I, Left, FindRelevantRulesForSymbol0_GoToNextRule),
    (FindRelevantRulesForSymbol0_CheckBeginningSymbol_E, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol0_GoToNextRule),
    (FindRelevantRulesForSymbol0_CheckBeginningSymbol_E, O) -> Transformation(O, Right, FindRelevantRulesForSymbol0_MarkMatchingSymbol),
    (FindRelevantRulesForSymbol0_MarkMatchingSymbol, Empty) -> Transformation(x, Left, FindRelevantRulesForSymbol0_GoToNextRule),
    (FindRelevantRulesForSymbol0_GoToNextRule, O) -> Transformation(O, Left, FindRelevantRulesForSymbol0_GoToNextRule),
    (FindRelevantRulesForSymbol0_GoToNextRule, I) -> Transformation(I, Left, FindRelevantRulesForSymbol0_GoToNextRule),
    (FindRelevantRulesForSymbol0_GoToNextRule, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbol0_GoToNextRule),
    (FindRelevantRulesForSymbol0_GoToNextRule, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbol0_GoToNextRule),
    (FindRelevantRulesForSymbol0_GoToNextRule, x) -> Transformation(x, Left, FindRelevantRulesForSymbol0_GoToNextRule),
    (FindRelevantRulesForSymbol0_GoToNextRule, Semicolon) -> Transformation(Semicolon, Left, FindRelevantRulesForSymbol0_EndingState),
    (FindRelevantRulesForSymbol0_EndingState, a) -> Transformation(a, Right, FindApplicableRule),

    // Current scanned virtual cell contains empty - mark all relevant rules
    (ReadCurrentScannedVirtualCell, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbolEmpty_NonRuleSection),
    (FindRelevantRulesForSymbolEmpty_NonRuleSection, O) -> Transformation(O, Left, FindRelevantRulesForSymbolEmpty_NonRuleSection),
    (FindRelevantRulesForSymbolEmpty_NonRuleSection, I) -> Transformation(I, Left, FindRelevantRulesForSymbolEmpty_NonRuleSection),
    (FindRelevantRulesForSymbolEmpty_NonRuleSection, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbolEmpty_NonRuleSection),
    (FindRelevantRulesForSymbolEmpty_NonRuleSection, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbolEmpty_NonRuleSection),
    (FindRelevantRulesForSymbolEmpty_NonRuleSection, Tilde) -> Transformation(Tilde, Left, FindRelevantRulesForSymbolEmpty_EndingState),
    (FindRelevantRulesForSymbolEmpty_EndingState, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbolEmpty_EndingState),
    (FindRelevantRulesForSymbolEmpty_EndingState, I) -> Transformation(I, Left, FindRelevantRulesForSymbolEmpty_EndingState),
    (FindRelevantRulesForSymbolEmpty_EndingState, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbolEmpty_MovementInstruction),
    (FindRelevantRulesForSymbolEmpty_MovementInstruction, O) -> Transformation(O, Left, FindRelevantRulesForSymbolEmpty_MovementInstruction),
    (FindRelevantRulesForSymbolEmpty_MovementInstruction, I) -> Transformation(I, Left, FindRelevantRulesForSymbolEmpty_MovementInstruction),
    (FindRelevantRulesForSymbolEmpty_MovementInstruction, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbolEmpty_MovementInstruction),
    (FindRelevantRulesForSymbolEmpty_MovementInstruction, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbolEmpty_NewSymbol),
    (FindRelevantRulesForSymbolEmpty_NewSymbol, O) -> Transformation(O, Left, FindRelevantRulesForSymbolEmpty_NewSymbol),
    (FindRelevantRulesForSymbolEmpty_NewSymbol, I) -> Transformation(I, Left, FindRelevantRulesForSymbolEmpty_NewSymbol),
    (FindRelevantRulesForSymbolEmpty_NewSymbol, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbolEmpty_NewSymbol),
    (FindRelevantRulesForSymbolEmpty_NewSymbol, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbolEmpty_CheckBeginningSymbol_E),
    (FindRelevantRulesForSymbolEmpty_CheckBeginningSymbol_E, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbolEmpty_CheckBeginningSymbol_F),
    (FindRelevantRulesForSymbolEmpty_CheckBeginningSymbol_F, I) -> Transformation(I, Left, FindRelevantRulesForSymbolEmpty_GoToNextRule),
    (FindRelevantRulesForSymbolEmpty_CheckBeginningSymbol_F, O) -> Transformation(O, Left, FindRelevantRulesForSymbolEmpty_GoToNextRule),
    (FindRelevantRulesForSymbolEmpty_CheckBeginningSymbol_F, Empty) -> Transformation(Empty, Right, FindRelevantRulesForSymbolEmpty_MarkMatchingSymbol),
    (FindRelevantRulesForSymbolEmpty_MarkMatchingSymbol, Empty) -> Transformation(x, Left, FindRelevantRulesForSymbolEmpty_GoToNextRule),
    (FindRelevantRulesForSymbolEmpty_GoToNextRule, O) -> Transformation(O, Left, FindRelevantRulesForSymbolEmpty_GoToNextRule),
    (FindRelevantRulesForSymbolEmpty_GoToNextRule, I) -> Transformation(I, Left, FindRelevantRulesForSymbolEmpty_GoToNextRule),
    (FindRelevantRulesForSymbolEmpty_GoToNextRule, Empty) -> Transformation(Empty, Left, FindRelevantRulesForSymbolEmpty_GoToNextRule),
    (FindRelevantRulesForSymbolEmpty_GoToNextRule, Colon) -> Transformation(Colon, Left, FindRelevantRulesForSymbolEmpty_GoToNextRule),
    (FindRelevantRulesForSymbolEmpty_GoToNextRule, x) -> Transformation(x, Left, FindRelevantRulesForSymbolEmpty_GoToNextRule),
    (FindRelevantRulesForSymbolEmpty_GoToNextRule, Semicolon) -> Transformation(Semicolon, Left, FindRelevantRulesForSymbolEmpty_EndingState),
    (FindRelevantRulesForSymbolEmpty_EndingState, a) -> Transformation(a, Right, FindApplicableRule),

    // Find applicable rule
    (FindApplicableRule, Semicolon) -> Transformation(Semicolon, Right, FindApplicableRule_BeginningState),
    (FindApplicableRule_BeginningState, I) -> Transformation(I, Right, FindApplicableRule_BeginningState),
    (FindApplicableRule_BeginningState, Empty) -> Transformation(Empty, Right, FindApplicableRule_BeginningState),
    (FindApplicableRule_BeginningState, Colon) -> Transformation(Colon, Right, FindApplicableRule_BeginningState_CheckIfMarked),
    (FindApplicableRule_BeginningState_CheckIfMarked, Empty) -> Transformation(Empty, Right, FindApplicableRule_GoToNextRule),
    (FindApplicableRule_GoToNextRule, O) -> Transformation(O, Right, FindApplicableRule_GoToNextRule),
    (FindApplicableRule_GoToNextRule, I) -> Transformation(I, Right, FindApplicableRule_GoToNextRule),
    (FindApplicableRule_GoToNextRule, Empty) -> Transformation(Empty, Right, FindApplicableRule_GoToNextRule),
    (FindApplicableRule_GoToNextRule, Colon) -> Transformation(Colon, Right, FindApplicableRule_GoToNextRule),
    (FindApplicableRule_GoToNextRule, x) -> Transformation(Empty, Right, FindApplicableRule_GoToNextRule),
    (FindApplicableRule_GoToNextRule, Semicolon) -> Transformation(Semicolon, Right, FindApplicableRule_BeginningState),
    (FindApplicableRule_GoToNextRule, Tilde) -> Transformation(Tilde, Right, NoApplicableRulesFound),
    (FindApplicableRule_BeginningState_CheckIfMarked, x) -> Transformation(Empty, Right, FindApplicableRule_BeginningSymbol),
    (FindApplicableRule_BeginningSymbol, O) -> Transformation(O, Right, FindApplicableRule_BeginningSymbol_CheckIfMarked),
    (FindApplicableRule_BeginningSymbol, I) -> Transformation(I, Right, FindApplicableRule_BeginningSymbol_CheckIfMarked),
    (FindApplicableRule_BeginningSymbol, Empty) -> Transformation(Empty, Right, FindApplicableRule_BeginningSymbol_CheckIfMarked),
    (FindApplicableRule_BeginningSymbol_CheckIfMarked, Empty) -> Transformation(Empty, Right, FindApplicableRule_GoToNextRule),
    (FindApplicableRule_BeginningSymbol_CheckIfMarked, x) -> Transformation(Empty, Right, FindApplicableRule_ApplicableRuleFound_GetNextSymbol),
    (FindApplicableRule_ApplicableRuleFound_GetNextSymbol, Colon) -> Transformation(Colon, Right, FindApplicableRule_ApplicableRuleFound_ReadNextSymbol_F),
    (FindApplicableRule_ApplicableRuleFound_ReadNextSymbol_F, Empty) -> Transformation(Empty, Right, FindApplicableRule_ApplicableRuleFound_ReadNextSymbol_E),

    // Copy new symbol 0
    (FindApplicableRule_ApplicableRuleFound_ReadNextSymbol_E, O) -> Transformation(O, Right, CopyNewState_0_Mark),
    (CopyNewState_0_Mark, Colon) -> Transformation(Colon, Right, CopyNewState_0_Mark),
    (CopyNewState_0_Mark, Empty) -> Transformation(x, Right, CopyNewState_0),
    (CopyNewState_0, O) -> Transformation(O, Right, CopyNewState_0),
    (CopyNewState_0, I) -> Transformation(I, Right, CopyNewState_0),
    (CopyNewState_0, Empty) -> Transformation(Empty, Right, CopyNewState_0),
    (CopyNewState_0, x) -> Transformation(Empty, Right, CopyNewState_0),
    (CopyNewState_0, Colon) -> Transformation(Colon, Right, CopyNewState_0),
    (CopyNewState_0, Semicolon) -> Transformation(Semicolon, Right, CopyNewState_0),
    (CopyNewState_0, Tilde) -> Transformation(Tilde, Right, CopyNewState_0),
    (CopyNewState_0, h) -> Transformation(u, Right, GoToMarkedMovementInstruction),

    // Copy new symbol 1
    (FindApplicableRule_ApplicableRuleFound_ReadNextSymbol_E, I) -> Transformation(I, Right, CopyNewState_1_Mark),
    (CopyNewState_1_Mark, Colon) -> Transformation(Colon, Right, CopyNewState_1_Mark),
    (CopyNewState_1_Mark, Empty) -> Transformation(x, Right, CopyNewState_1),
    (CopyNewState_1, O) -> Transformation(O, Right, CopyNewState_1),
    (CopyNewState_1, I) -> Transformation(I, Right, CopyNewState_1),
    (CopyNewState_1, Empty) -> Transformation(Empty, Right, CopyNewState_1),
    (CopyNewState_1, x) -> Transformation(Empty, Right, CopyNewState_1),
    (CopyNewState_1, Colon) -> Transformation(Colon, Right, CopyNewState_1),
    (CopyNewState_1, Semicolon) -> Transformation(Semicolon, Right, CopyNewState_1),
    (CopyNewState_1, Tilde) -> Transformation(Tilde, Right, CopyNewState_1),
    (CopyNewState_1, h) -> Transformation(v, Left, GoToMarkedMovementInstruction),

    // Copy new symbol empty
    (FindApplicableRule_ApplicableRuleFound_ReadNextSymbol_E, Empty) -> Transformation(Empty, Right, CopyNewState_Empty_Mark),
    (CopyNewState_Empty_Mark, Colon) -> Transformation(Colon, Right, CopyNewState_Empty_Mark),
    (CopyNewState_Empty_Mark, Empty) -> Transformation(x, Right, CopyNewState_Empty),
    (CopyNewState_Empty, O) -> Transformation(O, Right, CopyNewState_Empty),
    (CopyNewState_Empty, I) -> Transformation(I, Right, CopyNewState_Empty),
    (CopyNewState_Empty, Empty) -> Transformation(Empty, Right, CopyNewState_Empty),
    (CopyNewState_Empty, x) -> Transformation(Empty, Right, CopyNewState_Empty),
    (CopyNewState_Empty, Colon) -> Transformation(Colon, Right, CopyNewState_Empty),
    (CopyNewState_Empty, Semicolon) -> Transformation(Semicolon, Right, CopyNewState_Empty),
    (CopyNewState_Empty, Tilde) -> Transformation(Tilde, Right, CopyNewState_Empty),
    (CopyNewState_Empty, h) -> Transformation(w, Left, GoToMarkedMovementInstruction),

    // return to movement instruction
    (GoToMarkedMovementInstruction, O) -> Transformation(O, Left, GoToMarkedMovementInstruction),
    (GoToMarkedMovementInstruction, I) -> Transformation(I, Left, GoToMarkedMovementInstruction),
    (GoToMarkedMovementInstruction, Empty) -> Transformation(Empty, Left, GoToMarkedMovementInstruction),
    (GoToMarkedMovementInstruction, Colon) -> Transformation(Colon, Left, GoToMarkedMovementInstruction),
    (GoToMarkedMovementInstruction, u) -> Transformation(u, Left, GoToMarkedMovementInstruction),
    (GoToMarkedMovementInstruction, v) -> Transformation(v, Left, GoToMarkedMovementInstruction),
    (GoToMarkedMovementInstruction, w) -> Transformation(w, Left, GoToMarkedMovementInstruction),
    (GoToMarkedMovementInstruction, h) -> Transformation(h, Left, GoToMarkedMovementInstruction),
    (GoToMarkedMovementInstruction, Semicolon) -> Transformation(Semicolon, Left, GoToMarkedMovementInstruction),
    (GoToMarkedMovementInstruction, Tilde) -> Transformation(Tilde, Left, GoToMarkedMovementInstruction),
    (GoToMarkedMovementInstruction, x) -> Transformation(Empty, Right, ReadMovementInstruction),
    (ReadMovementInstruction, Colon) -> Transformation(Colon, Right, ReadMovementInstruction),
    (ReadMovementInstruction, Empty) -> Transformation(Empty, Right, ReadMovementInstruction),

    // copy left movement instruction
    (ReadMovementInstruction, O) -> Transformation(O, Right, MovementInstruction_L_Mark),
    (MovementInstruction_L_Mark, Colon) -> Transformation(Colon, Right, MovementInstruction_L_Mark),
    (MovementInstruction_L_Mark, Empty) -> Transformation(x, Right, CopyMovementInstruction_L),
    (CopyMovementInstruction_L, O) -> Transformation(O, Right, CopyMovementInstruction_L),
    (CopyMovementInstruction_L, I) -> Transformation(I, Right, CopyMovementInstruction_L),
    (CopyMovementInstruction_L, Empty) -> Transformation(Empty, Right, CopyMovementInstruction_L),
    (CopyMovementInstruction_L, Colon) -> Transformation(Colon, Right, CopyMovementInstruction_L),
    (CopyMovementInstruction_L, Semicolon) -> Transformation(Semicolon, Right, CopyMovementInstruction_L),
    (CopyMovementInstruction_L, Tilde) -> Transformation(Tilde, Right, CopyMovementInstruction_L),
    (CopyMovementInstruction_L, u) -> Transformation(u, Left, MoveVirtualHead_L_F),
    (CopyMovementInstruction_L, v) -> Transformation(v, Left, MoveVirtualHead_L_F),
    (CopyMovementInstruction_L, w) -> Transformation(w, Left, MoveVirtualHead_L_F),
    (MoveVirtualHead_L_F, O) -> Transformation(O, Left, MoveVirtualHead_L_E),
    (MoveVirtualHead_L_F, I) -> Transformation(I, Left, MoveVirtualHead_L_E),
    (MoveVirtualHead_L_F, Empty) -> Transformation(Empty, Left, MoveVirtualHead_L_E),
    (MoveVirtualHead_L_E, Empty) -> Transformation(h, Left, GoToMarkedNewState),

    // copy right movement instruction
    (ReadMovementInstruction, I) -> Transformation(I, Right, MovementInstruction_R_Mark),
    (MovementInstruction_R_Mark, Colon) -> Transformation(Colon, Right, MovementInstruction_R_Mark),
    (MovementInstruction_R_Mark, Empty) -> Transformation(x, Right, CopyMovementInstruction_R),
    (CopyMovementInstruction_R, O) -> Transformation(O, Right, CopyMovementInstruction_R),
    (CopyMovementInstruction_R, I) -> Transformation(I, Right, CopyMovementInstruction_R),
    (CopyMovementInstruction_R, Empty) -> Transformation(Empty, Right, CopyMovementInstruction_R),
    (CopyMovementInstruction_R, Colon) -> Transformation(Colon, Right, CopyMovementInstruction_R),
    (CopyMovementInstruction_R, Semicolon) -> Transformation(Semicolon, Right, CopyMovementInstruction_R),
    (CopyMovementInstruction_R, Tilde) -> Transformation(Tilde, Right, CopyMovementInstruction_R),
    (CopyMovementInstruction_R, u) -> Transformation(u, Right, MoveVirtualHead_R_F),
    (CopyMovementInstruction_R, v) -> Transformation(v, Right, MoveVirtualHead_R_F),
    (CopyMovementInstruction_R, w) -> Transformation(w, Right, MoveVirtualHead_R_F),
    (MoveVirtualHead_R_F, O) -> Transformation(O, Right, MoveVirtualHead_R_E),
    (MoveVirtualHead_R_F, I) -> Transformation(I, Right, MoveVirtualHead_R_E),
    (MoveVirtualHead_R_F, Empty) -> Transformation(Empty, Right, MoveVirtualHead_R_E),
    (MoveVirtualHead_R_E, Empty) -> Transformation(h, Left, GoToMarkedNewState),

    // copy new state
    (GoToMarkedNewState, O) -> Transformation(O, Left, GoToMarkedNewState),
    (GoToMarkedNewState, I) -> Transformation(I, Left, GoToMarkedNewState),
    (GoToMarkedNewState, Empty) -> Transformation(Empty, Left, GoToMarkedNewState),
    (GoToMarkedNewState, u) -> Transformation(u, Left, GoToMarkedNewState),
    (GoToMarkedNewState, v) -> Transformation(v, Left, GoToMarkedNewState),
    (GoToMarkedNewState, w) -> Transformation(w, Left, GoToMarkedNewState),
    (GoToMarkedNewState, Colon) -> Transformation(Colon, Left, GoToMarkedNewState),
    (GoToMarkedNewState, Semicolon) -> Transformation(Semicolon, Left, GoToMarkedNewState),
    (GoToMarkedNewState, Tilde) -> Transformation(Tilde, Left, GoToMarkedNewState),
    (GoToMarkedNewState, x) -> Transformation(Empty, Right, GoToStartOfNewState),

    // copy colon to end
    (GoToStartOfNewState, Colon) -> Transformation(Colon, Right, CopyColonToEnd_Mark),
    (CopyColonToEnd_Mark, Empty) -> Transformation(x, Right, CopyColonToEnd),
    (CopyColonToEnd, O) -> Transformation(O, Right, CopyColonToEnd),
    (CopyColonToEnd, I) -> Transformation(I, Right, CopyColonToEnd),
    (CopyColonToEnd, Empty) -> Transformation(Empty, Right, CopyColonToEnd),
    (CopyColonToEnd, Colon) -> Transformation(Colon, Right, CopyColonToEnd),
    (CopyColonToEnd, Semicolon) -> Transformation(Semicolon, Right, CopyColonToEnd),
    (CopyColonToEnd, Tilde) -> Transformation(Tilde, Right, CopyColonToEnd),
    (CopyColonToEnd, u) -> Transformation(u, Right, CopyColonToEnd),
    (CopyColonToEnd, v) -> Transformation(v, Right, CopyColonToEnd),
    (CopyColonToEnd, w) -> Transformation(w, Right, CopyColonToEnd),
    (CopyColonToEnd, h) -> Transformation(h, Right, CopyColonToEnd),
    (CopyColonToEnd, z) -> Transformation(Colon, Right, WriteColonToEnd_E),
    (WriteColonToEnd_E, z) -> Transformation(Empty, Right, WriteNewState_Firstz),
    (WriteNewState_Firstz, Empty) -> Transformation(z, Right, WriteNewState_Secondz),
    (WriteNewState_Secondz, Empty) -> Transformation(z, Left, GoToGetNextNewStateTally),

    // go to marked new state tally
    (GoToGetNextNewStateTally, z) -> Transformation(z, Left, GoToGetNextNewStateTally),
    (GoToGetNextNewStateTally, O) -> Transformation(O, Left, GoToGetNextNewStateTally),
    (GoToGetNextNewStateTally, I) -> Transformation(I, Left, GoToGetNextNewStateTally),
    (GoToGetNextNewStateTally, Empty) -> Transformation(Empty, Left, GoToGetNextNewStateTally),
    (GoToGetNextNewStateTally, Colon) -> Transformation(Colon, Left, GoToGetNextNewStateTally),
    (GoToGetNextNewStateTally, Semicolon) -> Transformation(Semicolon, Left, GoToGetNextNewStateTally),
    (GoToGetNextNewStateTally, Tilde) -> Transformation(Tilde, Left, GoToGetNextNewStateTally),
    (GoToGetNextNewStateTally, u) -> Transformation(u, Left, GoToGetNextNewStateTally),
    (GoToGetNextNewStateTally, v) -> Transformation(v, Left, GoToGetNextNewStateTally),
    (GoToGetNextNewStateTally, w) -> Transformation(w, Left, GoToGetNextNewStateTally),
    (GoToGetNextNewStateTally, h) -> Transformation(h, Left, GoToGetNextNewStateTally),
    (GoToGetNextNewStateTally, x) -> Transformation(Empty, Right, CopyNewStateTally_Mark),

    // copy state tally to end
    (CopyNewStateTally_Mark, I) -> Transformation(I, Right, CopyNewStateTally_Mark),
    (CopyNewStateTally_Mark, Empty) -> Transformation(x, Right, CopyNewStateTally),
    (CopyNewStateTally, O) -> Transformation(O, Right, CopyNewStateTally),
    (CopyNewStateTally, I) -> Transformation(I, Right, CopyNewStateTally),
    (CopyNewStateTally, Empty) -> Transformation(Empty, Right, CopyNewStateTally),
    (CopyNewStateTally, Colon) -> Transformation(Colon, Right, CopyNewStateTally),
    (CopyNewStateTally, Semicolon) -> Transformation(Semicolon, Right, CopyNewStateTally),
    (CopyNewStateTally, Tilde) -> Transformation(Tilde, Right, CopyNewStateTally),
    (CopyNewStateTally, u) -> Transformation(u, Right, CopyNewStateTally),
    (CopyNewStateTally, v) -> Transformation(v, Right, CopyNewStateTally),
    (CopyNewStateTally, w) -> Transformation(w, Right, CopyNewStateTally),
    (CopyNewStateTally, h) -> Transformation(h, Right, CopyNewStateTally),
    (CopyNewStateTally, z) -> Transformation(I, Right, Write1ToEnd_E),
    (Write1ToEnd_E, z) -> Transformation(Empty, Right, WriteNewState_Firstz),
    (WriteNewState_Firstz, Empty) -> Transformation(z, Right, WriteNewState_Secondz),
    (WriteNewState_Secondz, Empty) -> Transformation(z, Left, GoToGetNextNewStateTally),

    // find start of virtual tape's previous state
    (CopyNewStateTally_Mark, Semicolon) -> Transformation(Semicolon, Right, CopyVirtualTape_GoToEnd),
    (CopyNewStateTally_Mark, Tilde) -> Transformation(Tilde, Right, CopyVirtualTape_GoToEnd),
    (CopyVirtualTape_GoToEnd, O) -> Transformation(O, Right, CopyVirtualTape_GoToEnd),
    (CopyVirtualTape_GoToEnd, I) -> Transformation(I, Right, CopyVirtualTape_GoToEnd),
    (CopyVirtualTape_GoToEnd, Empty) -> Transformation(Empty, Right, CopyVirtualTape_GoToEnd),
    (CopyVirtualTape_GoToEnd, Colon) -> Transformation(Colon, Right, CopyVirtualTape_GoToEnd),
    (CopyVirtualTape_GoToEnd, Semicolon) -> Transformation(Semicolon, Right, CopyVirtualTape_GoToEnd),
    (CopyVirtualTape_GoToEnd, Tilde) -> Transformation(Tilde, Right, CopyVirtualTape_GoToEnd),
    (CopyVirtualTape_GoToEnd, u) -> Transformation(u, Right, CopyVirtualTape_GoToEnd),
    (CopyVirtualTape_GoToEnd, v) -> Transformation(v, Right, CopyVirtualTape_GoToEnd),
    (CopyVirtualTape_GoToEnd, w) -> Transformation(w, Right, CopyVirtualTape_GoToEnd),
    (CopyVirtualTape_GoToEnd, h) -> Transformation(h, Right, CopyVirtualTape_GoToEnd),
    (CopyVirtualTape_GoToEnd, z) -> Transformation(z, Left, FindStartOfPreviousVirtualTape_StateSection),
    (FindStartOfPreviousVirtualTape_StateSection, I) -> Transformation(I, Left, FindStartOfPreviousVirtualTape_StateSection),
    (FindStartOfPreviousVirtualTape_StateSection, Empty) -> Transformation(Empty, Left, FindStartOfPreviousVirtualTape_StateSection),
    (FindStartOfPreviousVirtualTape_StateSection, Colon) -> Transformation(Colon, Left, FindStartOfPreviousVirtualTape_TapeSection),
    (FindStartOfPreviousVirtualTape_TapeSection, O) -> Transformation(O, Left, FindStartOfPreviousVirtualTape_TapeSection),
    (FindStartOfPreviousVirtualTape_TapeSection, I) -> Transformation(I, Left, FindStartOfPreviousVirtualTape_TapeSection),
    (FindStartOfPreviousVirtualTape_TapeSection, Empty) -> Transformation(Empty, Left, FindStartOfPreviousVirtualTape_TapeSection),
    (FindStartOfPreviousVirtualTape_TapeSection, u) -> Transformation(u, Left, FindStartOfPreviousVirtualTape_TapeSection),
    (FindStartOfPreviousVirtualTape_TapeSection, v) -> Transformation(v, Left, FindStartOfPreviousVirtualTape_TapeSection),
    (FindStartOfPreviousVirtualTape_TapeSection, w) -> Transformation(w, Left, FindStartOfPreviousVirtualTape_TapeSection),
    (FindStartOfPreviousVirtualTape_TapeSection, h) -> Transformation(h, Left, FindStartOfPreviousVirtualTape_TapeSection),
    (FindStartOfPreviousVirtualTape_TapeSection, Colon) -> Transformation(Colon, Right, FindStartOfPreviousVirtualTape_Colon_E),
    (FindStartOfPreviousVirtualTape_Colon_E, Empty) -> Transformation(Empty, Right, ReadFirstCell),

    // first cell to copy

    // 0
    (ReadFirstCell, O) -> Transformation(O, Right, MarkFirstCell_0),
    (MarkFirstCell_0, Empty) -> Transformation(x, Right, CopyFirstCell_0),
    (MarkFirstCell_0, u) -> Transformation(x, Right, CopyFirstCell_0),
    (MarkFirstCell_0, v) -> Transformation(x, Right, CopyFirstCell_1),
    (MarkFirstCell_0, w) -> Transformation(x, Right, CopyFirstCell_Empty),
    (CopyFirstCell_0, O) -> Transformation(O, Right, CopyFirstCell_0),
    (CopyFirstCell_0, I) -> Transformation(I, Right, CopyFirstCell_0),
    (CopyFirstCell_0, Empty) -> Transformation(Empty, Right, CopyFirstCell_0),
    (CopyFirstCell_0, u) -> Transformation(u, Right, CopyFirstCell_0),
    (CopyFirstCell_0, v) -> Transformation(v, Right, CopyFirstCell_0),
    (CopyFirstCell_0, w) -> Transformation(w, Right, CopyFirstCell_0),
    (CopyFirstCell_0, h) -> Transformation(h, Right, CopyFirstCell_0),
    (CopyFirstCell_0, Colon) -> Transformation(Colon, Right, CopyFirstCell_0),
    (CopyFirstCell_0, z) -> Transformation(Colon, Right, WriteFirstCell_0_Colon_E),
    (WriteFirstCell_0_Colon_E, z) -> Transformation(Empty, Right, WriteFirstCell_0_F),
    (WriteFirstCell_0_F, Empty) -> Transformation(O, Right, WriteFirstCell_0_E),
    (WriteFirstCell_0_E, Empty) -> Transformation(Empty, Right, WriteCell_Firstz),
    (WriteCell_Firstz, Empty) -> Transformation(z, Right, WriteCell_Secondz),
    (WriteCell_Secondz, Empty) -> Transformation(z, Left, FindNextCellToCopy),

    (MarkFirstCell_0, h) -> Transformation(x, Right, CopyFirstCell_0_Scanned),
    (CopyFirstCell_0_Scanned, O) -> Transformation(O, Right, CopyFirstCell_0_Scanned),
    (CopyFirstCell_0_Scanned, I) -> Transformation(I, Right, CopyFirstCell_0_Scanned),
    (CopyFirstCell_0_Scanned, Empty) -> Transformation(Empty, Right, CopyFirstCell_0_Scanned),
    (CopyFirstCell_0_Scanned, u) -> Transformation(u, Right, CopyFirstCell_0_Scanned),
    (CopyFirstCell_0_Scanned, v) -> Transformation(v, Right, CopyFirstCell_0_Scanned),
    (CopyFirstCell_0_Scanned, w) -> Transformation(w, Right, CopyFirstCell_0_Scanned),
    (CopyFirstCell_0_Scanned, Colon) -> Transformation(Colon, Right, CopyFirstCell_0_Scanned),
    (CopyFirstCell_0_Scanned, z) -> Transformation(Colon, Right, WriteFirstCell_0_Scanned_Colon_E),
    (WriteFirstCell_0_Scanned_Colon_E, z) -> Transformation(Empty, Right, WriteFirstCell_0_Buffer_F),
    (WriteFirstCell_0_Buffer_F, Empty) -> Transformation(Empty, Right, WriteFirstCell_0_Buffer_E),
    (WriteFirstCell_0_Buffer_E, Empty) -> Transformation(Empty, Right, WriteFirstCell_0_Scanned_F),
    (WriteFirstCell_0_Scanned_F, Empty) -> Transformation(O, Right, WriteFirstCell_0_Scanned_E),
    (WriteFirstCell_0_Scanned_E, Empty) -> Transformation(h, Right, WriteCell_Firstz),

    // 1
    (ReadFirstCell, I) -> Transformation(I, Right, MarkFirstCell_1),
    (MarkFirstCell_1, Empty) -> Transformation(x, Right, CopyFirstCell_1),
    (MarkFirstCell_1, u) -> Transformation(x, Right, CopyFirstCell_0),
    (MarkFirstCell_1, v) -> Transformation(x, Right, CopyFirstCell_1),
    (MarkFirstCell_1, w) -> Transformation(x, Right, CopyFirstCell_Empty),
    (CopyFirstCell_1, O) -> Transformation(O, Right, CopyFirstCell_1),
    (CopyFirstCell_1, I) -> Transformation(I, Right, CopyFirstCell_1),
    (CopyFirstCell_1, Empty) -> Transformation(Empty, Right, CopyFirstCell_1),
    (CopyFirstCell_1, u) -> Transformation(u, Right, CopyFirstCell_1),
    (CopyFirstCell_1, v) -> Transformation(v, Right, CopyFirstCell_1),
    (CopyFirstCell_1, w) -> Transformation(w, Right, CopyFirstCell_1),
    (CopyFirstCell_1, h) -> Transformation(h, Right, CopyFirstCell_1),
    (CopyFirstCell_1, Colon) -> Transformation(Colon, Right, CopyFirstCell_1),
    (CopyFirstCell_1, z) -> Transformation(Colon, Right, WriteFirstCell_1_Colon_E),
    (WriteFirstCell_1_Colon_E, z) -> Transformation(Empty, Right, WriteFirstCell_1_F),
    (WriteFirstCell_1_F, Empty) -> Transformation(I, Right, WriteFirstCell_1_E),
    (WriteFirstCell_1_E, Empty) -> Transformation(Empty, Right, WriteCell_Firstz),

    (MarkFirstCell_1, h) -> Transformation(x, Right, CopyFirstCell_1_Scanned),
    (CopyFirstCell_1_Scanned, O) -> Transformation(O, Right, CopyFirstCell_1_Scanned),
    (CopyFirstCell_1_Scanned, I) -> Transformation(I, Right, CopyFirstCell_1_Scanned),
    (CopyFirstCell_1_Scanned, Empty) -> Transformation(Empty, Right, CopyFirstCell_1_Scanned),
    (CopyFirstCell_1_Scanned, u) -> Transformation(u, Right, CopyFirstCell_1_Scanned),
    (CopyFirstCell_1_Scanned, v) -> Transformation(v, Right, CopyFirstCell_1_Scanned),
    (CopyFirstCell_1_Scanned, w) -> Transformation(w, Right, CopyFirstCell_1_Scanned),
    (CopyFirstCell_1_Scanned, Colon) -> Transformation(Colon, Right, CopyFirstCell_1_Scanned),
    (CopyFirstCell_1_Scanned, z) -> Transformation(Colon, Right, WriteFirstCell_1_Scanned_Colon_E),
    (WriteFirstCell_1_Scanned_Colon_E, z) -> Transformation(Empty, Right, WriteFirstCell_1_Buffer_F),
    (WriteFirstCell_1_Buffer_F, Empty) -> Transformation(Empty, Right, WriteFirstCell_1_Buffer_E),
    (WriteFirstCell_1_Buffer_E, Empty) -> Transformation(Empty, Right, WriteFirstCell_1_Scanned_F),
    (WriteFirstCell_1_Scanned_F, Empty) -> Transformation(I, Right, WriteFirstCell_1_Scanned_E),
    (WriteFirstCell_1_Scanned_E, Empty) -> Transformation(h, Right, WriteCell_Firstz),

    // Empty
    (ReadFirstCell, Empty) -> Transformation(Empty, Right, MarkFirstCell_Empty),
    (MarkFirstCell_Empty, Empty) -> Transformation(x, Right, CopyFirstCell_Empty_CheckIfNextCellScanned_F),
    (MarkFirstCell_Empty, u) -> Transformation(x, Right, CopyFirstCell_0),
    (MarkFirstCell_Empty, v) -> Transformation(x, Right, CopyFirstCell_1),
    (MarkFirstCell_Empty, w) -> Transformation(x, Right, CopyFirstCell_Empty),
    (CopyFirstCell_Empty_CheckIfNextCellScanned_F, O) -> Transformation(O, Right, CopyFirstCell_Empty_CheckIfNextCellScanned_E),
    (CopyFirstCell_Empty_CheckIfNextCellScanned_F, I) -> Transformation(I, Right, CopyFirstCell_Empty_CheckIfNextCellScanned_E),
    (CopyFirstCell_Empty_CheckIfNextCellScanned_F, Empty) -> Transformation(Empty, Right, CopyFirstCell_Empty_CheckIfNextCellScanned_E),
    (CopyFirstCell_Empty_CheckIfNextCellScanned_E, Empty) -> Transformation(Empty, Left, CopyFirstCell_Empty_DeletePreviousMark_F),
    (CopyFirstCell_Empty_CheckIfNextCellScanned_E, u) -> Transformation(u, Left, CopyFirstCell_Empty_DeletePreviousMark_F),
    (CopyFirstCell_Empty_CheckIfNextCellScanned_E, v) -> Transformation(v, Left, CopyFirstCell_Empty_DeletePreviousMark_F),
    (CopyFirstCell_Empty_CheckIfNextCellScanned_E, w) -> Transformation(w, Left, CopyFirstCell_Empty_DeletePreviousMark_F),
    (CopyFirstCell_Empty_DeletePreviousMark_F, O) -> Transformation(O, Left, CopyFirstCell_Empty_DeletePreviousMark_E),
    (CopyFirstCell_Empty_DeletePreviousMark_F, I) -> Transformation(I, Left, CopyFirstCell_Empty_DeletePreviousMark_E),
    (CopyFirstCell_Empty_DeletePreviousMark_F, Empty) -> Transformation(Empty, Left, CopyFirstCell_Empty_DeletePreviousMark_E),
    (CopyFirstCell_Empty_DeletePreviousMark_E, x) -> Transformation(Empty, Right, ReadFirstCell),
    (CopyFirstCell_Empty_CheckIfNextCellScanned_E, h) -> Transformation(x, Right, CopyFirstCell_Empty),
    (CopyFirstCell_Empty, O) -> Transformation(O, Right, CopyFirstCell_Empty),
    (CopyFirstCell_Empty, I) -> Transformation(I, Right, CopyFirstCell_Empty),
    (CopyFirstCell_Empty, Empty) -> Transformation(Empty, Right, CopyFirstCell_Empty),
    (CopyFirstCell_Empty, u) -> Transformation(u, Right, CopyFirstCell_Empty),
    (CopyFirstCell_Empty, v) -> Transformation(v, Right, CopyFirstCell_Empty),
    (CopyFirstCell_Empty, w) -> Transformation(w, Right, CopyFirstCell_Empty),
    (CopyFirstCell_Empty, h) -> Transformation(h, Right, CopyFirstCell_Empty),
    (CopyFirstCell_Empty, Colon) -> Transformation(Colon, Right, CopyFirstCell_Empty),
    (CopyFirstCell_Empty, z) -> Transformation(Colon, Right, WriteFirstCell_Empty_Colon_E),
    (WriteFirstCell_Empty_Colon_E, z) -> Transformation(Empty, Right, WriteFirstCell_Empty_F),
    (WriteFirstCell_Empty_F, Empty) -> Transformation(Empty, Right, WriteFirstCell_Empty_E),
    (WriteFirstCell_Empty_E, Empty) -> Transformation(Empty, Right, WriteCell_Firstz),

    (MarkFirstCell_Empty, h) -> Transformation(x, Right, CopyFirstCell_Empty_Scanned),
    (CopyFirstCell_Empty_Scanned, O) -> Transformation(O, Right, CopyFirstCell_Empty_Scanned),
    (CopyFirstCell_Empty_Scanned, I) -> Transformation(I, Right, CopyFirstCell_Empty_Scanned),
    (CopyFirstCell_Empty_Scanned, Empty) -> Transformation(Empty, Right, CopyFirstCell_Empty_Scanned),
    (CopyFirstCell_Empty_Scanned, u) -> Transformation(u, Right, CopyFirstCell_Empty_Scanned),
    (CopyFirstCell_Empty_Scanned, v) -> Transformation(v, Right, CopyFirstCell_Empty_Scanned),
    (CopyFirstCell_Empty_Scanned, w) -> Transformation(w, Right, CopyFirstCell_Empty_Scanned),
    (CopyFirstCell_Empty_Scanned, Colon) -> Transformation(Colon, Right, CopyFirstCell_Empty_Scanned),
    (CopyFirstCell_Empty_Scanned, z) -> Transformation(Colon, Right, WriteFirstCell_Empty_Scanned_Colon_E),
    (WriteFirstCell_Empty_Scanned_Colon_E, z) -> Transformation(Empty, Right, WriteFirstCell_Empty_Buffer_F),
    (WriteFirstCell_Empty_Buffer_F, Empty) -> Transformation(Empty, Right, WriteFirstCell_Empty_Buffer_E),
    (WriteFirstCell_Empty_Buffer_E, Empty) -> Transformation(Empty, Right, WriteFirstCell_Empty_Scanned_F),
    (WriteFirstCell_Empty_Scanned_F, Empty) -> Transformation(Empty, Right, WriteFirstCell_Empty_Scanned_E),
    (WriteFirstCell_Empty_Scanned_E, Empty) -> Transformation(h, Right, WriteCell_Firstz),

    // find next cell to copy
    (FindNextCellToCopy, z) -> Transformation(z, Left, FindNextCellToCopy),
    (FindNextCellToCopy, O) -> Transformation(O, Left, FindNextCellToCopy),
    (FindNextCellToCopy, I) -> Transformation(I, Left, FindNextCellToCopy),
    (FindNextCellToCopy, Empty) -> Transformation(Empty, Left, FindNextCellToCopy),
    (FindNextCellToCopy, u) -> Transformation(u, Left, FindNextCellToCopy),
    (FindNextCellToCopy, v) -> Transformation(v, Left, FindNextCellToCopy),
    (FindNextCellToCopy, w) -> Transformation(w, Left, FindNextCellToCopy),
    (FindNextCellToCopy, h) -> Transformation(h, Left, FindNextCellToCopy),
    (FindNextCellToCopy, Colon) -> Transformation(Colon, Left, FindNextCellToCopy),
    (FindNextCellToCopy, x) -> Transformation(Empty, Right, ReadNextCellToCopy),

    // copy next cell
    // 0
    (ReadNextCellToCopy, O) -> Transformation(O, Right, MarkCell_0),
    (MarkCell_0, Empty) -> Transformation(x, Right, CopyCell_0),
    (MarkCell_0, u) -> Transformation(x, Right, CopyCell_0),
    (MarkCell_0, v) -> Transformation(x, Right, CopyCell_1),
    (MarkCell_0, w) -> Transformation(x, Right, CopyCell_Empty),
    (CopyCell_0, O) -> Transformation(O, Right, CopyCell_0),
    (CopyCell_0, I) -> Transformation(I, Right, CopyCell_0),
    (CopyCell_0, Empty) -> Transformation(Empty, Right, CopyCell_0),
    (CopyCell_0, u) -> Transformation(u, Right, CopyCell_0),
    (CopyCell_0, v) -> Transformation(v, Right, CopyCell_0),
    (CopyCell_0, w) -> Transformation(w, Right, CopyCell_0),
    (CopyCell_0, h) -> Transformation(h, Right, CopyCell_0),
    (CopyCell_0, Colon) -> Transformation(Colon, Right, CopyCell_0),
    (CopyCell_0, z) -> Transformation(O, Right, WriteCell_0_E),
    (WriteCell_0_E, z) -> Transformation(Empty, Right, WriteCell_Firstz),

    (MarkCell_0, h) -> Transformation(x, Right, CopyCell_0_Scanned_CheckIfBufferRequired),
    (CopyCell_0_Scanned_CheckIfBufferRequired, O) -> Transformation(O, Right, CopyCell_0_Scanned),
    (CopyCell_0_Scanned_CheckIfBufferRequired, I) -> Transformation(I, Right, CopyCell_0_Scanned),
    (CopyCell_0_Scanned_CheckIfBufferRequired, Empty) -> Transformation(Empty, Right, CopyCell_0_Scanned),
    (CopyCell_0_Scanned, O) -> Transformation(O, Right, CopyCell_0_Scanned),
    (CopyCell_0_Scanned, I) -> Transformation(I, Right, CopyCell_0_Scanned),
    (CopyCell_0_Scanned, Empty) -> Transformation(Empty, Right, CopyCell_0_Scanned),
    (CopyCell_0_Scanned, u) -> Transformation(u, Right, CopyCell_0_Scanned),
    (CopyCell_0_Scanned, v) -> Transformation(v, Right, CopyCell_0_Scanned),
    (CopyCell_0_Scanned, w) -> Transformation(w, Right, CopyCell_0_Scanned),
    (CopyCell_0_Scanned, h) -> Transformation(h, Right, CopyCell_0_Scanned),
    (CopyCell_0_Scanned, Colon) -> Transformation(Colon, Right, CopyCell_0_Scanned),
    (CopyCell_0_Scanned, z) -> Transformation(O, Right, WriteCell_0_Scanned_E),
    (WriteCell_0_Scanned_E, z) -> Transformation(h, Right, WriteCell_Firstz),

    (CopyCell_0_Scanned_CheckIfBufferRequired, Colon) -> Transformation(Colon, Right, CopyCell_0_Scanned_Buffer),
    (CopyCell_0_Scanned_Buffer, O) -> Transformation(O, Right, CopyCell_0_Scanned_Buffer),
    (CopyCell_0_Scanned_Buffer, I) -> Transformation(I, Right, CopyCell_0_Scanned_Buffer),
    (CopyCell_0_Scanned_Buffer, Empty) -> Transformation(Empty, Right, CopyCell_0_Scanned_Buffer),
    (CopyCell_0_Scanned_Buffer, u) -> Transformation(u, Right, CopyCell_0_Scanned_Buffer),
    (CopyCell_0_Scanned_Buffer, v) -> Transformation(v, Right, CopyCell_0_Scanned_Buffer),
    (CopyCell_0_Scanned_Buffer, w) -> Transformation(w, Right, CopyCell_0_Scanned_Buffer),
    (CopyCell_0_Scanned_Buffer, h) -> Transformation(h, Right, CopyCell_0_Scanned_Buffer),
    (CopyCell_0_Scanned_Buffer, Colon) -> Transformation(Colon, Right, CopyCell_0_Scanned_Buffer),
    (CopyCell_0_Scanned_Buffer, z) -> Transformation(O, Right, WriteCell_0_Scanned_Buffer_E),
    (WriteCell_0_Scanned_Buffer_E, z) -> Transformation(h, Right, WriteCell_Buffer_F),
    (WriteCell_Buffer_F, Empty) -> Transformation(Empty, Right, WriteCell_Buffer_E),
    (WriteCell_Buffer_E, Empty) -> Transformation(Empty, Right, WriteCell_Firstz),

    // 1
    (ReadNextCellToCopy, I) -> Transformation(I, Right, MarkCell_1),
    (MarkCell_1, Empty) -> Transformation(x, Right, CopyCell_1),
    (MarkCell_1, u) -> Transformation(x, Right, CopyCell_0),
    (MarkCell_1, v) -> Transformation(x, Right, CopyCell_1),
    (MarkCell_1, w) -> Transformation(x, Right, CopyCell_Empty),
    (CopyCell_1, O) -> Transformation(O, Right, CopyCell_1),
    (CopyCell_1, I) -> Transformation(I, Right, CopyCell_1),
    (CopyCell_1, Empty) -> Transformation(Empty, Right, CopyCell_1),
    (CopyCell_1, u) -> Transformation(u, Right, CopyCell_1),
    (CopyCell_1, v) -> Transformation(v, Right, CopyCell_1),
    (CopyCell_1, w) -> Transformation(w, Right, CopyCell_1),
    (CopyCell_1, h) -> Transformation(h, Right, CopyCell_1),
    (CopyCell_1, Colon) -> Transformation(Colon, Right, CopyCell_1),
    (CopyCell_1, z) -> Transformation(I, Right, WriteCell_1_E),
    (WriteCell_1_E, z) -> Transformation(Empty, Right, WriteCell_Firstz),

    (MarkCell_1, h) -> Transformation(x, Right, CopyCell_1_Scanned_CheckIfBufferRequired),
    (CopyCell_1_Scanned_CheckIfBufferRequired, O) -> Transformation(O, Right, CopyCell_1_Scanned),
    (CopyCell_1_Scanned_CheckIfBufferRequired, I) -> Transformation(I, Right, CopyCell_1_Scanned),
    (CopyCell_1_Scanned_CheckIfBufferRequired, Empty) -> Transformation(Empty, Right, CopyCell_1_Scanned),
    (CopyCell_1_Scanned, O) -> Transformation(O, Right, CopyCell_1_Scanned),
    (CopyCell_1_Scanned, I) -> Transformation(I, Right, CopyCell_1_Scanned),
    (CopyCell_1_Scanned, Empty) -> Transformation(Empty, Right, CopyCell_1_Scanned),
    (CopyCell_1_Scanned, u) -> Transformation(u, Right, CopyCell_1_Scanned),
    (CopyCell_1_Scanned, v) -> Transformation(v, Right, CopyCell_1_Scanned),
    (CopyCell_1_Scanned, w) -> Transformation(w, Right, CopyCell_1_Scanned),
    (CopyCell_1_Scanned, h) -> Transformation(h, Right, CopyCell_1_Scanned),
    (CopyCell_1_Scanned, Colon) -> Transformation(Colon, Right, CopyCell_1_Scanned),
    (CopyCell_1_Scanned, z) -> Transformation(I, Right, WriteCell_1_Scanned_E),
    (WriteCell_1_Scanned_E, z) -> Transformation(h, Right, WriteCell_Firstz),

    (CopyCell_1_Scanned_CheckIfBufferRequired, Colon) -> Transformation(Colon, Right, CopyCell_1_Scanned_Buffer),
    (CopyCell_1_Scanned_Buffer, O) -> Transformation(O, Right, CopyCell_1_Scanned_Buffer),
    (CopyCell_1_Scanned_Buffer, I) -> Transformation(I, Right, CopyCell_1_Scanned_Buffer),
    (CopyCell_1_Scanned_Buffer, Empty) -> Transformation(Empty, Right, CopyCell_1_Scanned_Buffer),
    (CopyCell_1_Scanned_Buffer, u) -> Transformation(u, Right, CopyCell_1_Scanned_Buffer),
    (CopyCell_1_Scanned_Buffer, v) -> Transformation(v, Right, CopyCell_1_Scanned_Buffer),
    (CopyCell_1_Scanned_Buffer, w) -> Transformation(w, Right, CopyCell_1_Scanned_Buffer),
    (CopyCell_1_Scanned_Buffer, h) -> Transformation(h, Right, CopyCell_1_Scanned_Buffer),
    (CopyCell_1_Scanned_Buffer, Colon) -> Transformation(Colon, Right, CopyCell_1_Scanned_Buffer),
    (CopyCell_1_Scanned_Buffer, z) -> Transformation(I, Right, WriteCell_1_Scanned_Buffer_E),
    (WriteCell_1_Scanned_Buffer_E, z) -> Transformation(h, Right, WriteCell_Buffer_F),
    (WriteCell_Buffer_F, Empty) -> Transformation(Empty, Right, WriteCell_Buffer_E),
    (WriteCell_Buffer_E, Empty) -> Transformation(Empty, Right, WriteCell_Firstz),

    // Empty
    (ReadNextCellToCopy, Empty) -> Transformation(Empty, Right, MarkCell_Empty),
    (MarkCell_Empty, Empty) -> Transformation(x, Right, CopyCell_Empty),
    (MarkCell_Empty, u) -> Transformation(x, Right, CopyCell_0),
    (MarkCell_Empty, v) -> Transformation(x, Right, CopyCell_1),
    (MarkCell_Empty, w) -> Transformation(x, Right, CopyCell_Empty),
    (CopyCell_Empty, O) -> Transformation(O, Right, CopyCell_Empty),
    (CopyCell_Empty, I) -> Transformation(I, Right, CopyCell_Empty),
    (CopyCell_Empty, Empty) -> Transformation(Empty, Right, CopyCell_Empty),
    (CopyCell_Empty, u) -> Transformation(u, Right, CopyCell_Empty),
    (CopyCell_Empty, v) -> Transformation(v, Right, CopyCell_Empty),
    (CopyCell_Empty, w) -> Transformation(w, Right, CopyCell_Empty),
    (CopyCell_Empty, h) -> Transformation(h, Right, CopyCell_Empty),
    (CopyCell_Empty, Colon) -> Transformation(Colon, Right, CopyCell_Empty),
    (CopyCell_Empty, z) -> Transformation(Empty, Right, WriteCell_Empty_E),
    (WriteCell_Empty_E, z) -> Transformation(Empty, Right, WriteCell_Firstz),

    (MarkCell_Empty, h) -> Transformation(x, Right, CopyCell_Empty_Scanned_CheckIfBufferRequired),
    (CopyCell_Empty_Scanned_CheckIfBufferRequired, O) -> Transformation(O, Right, CopyCell_Empty_Scanned),
    (CopyCell_Empty_Scanned_CheckIfBufferRequired, I) -> Transformation(I, Right, CopyCell_Empty_Scanned),
    (CopyCell_Empty_Scanned_CheckIfBufferRequired, Empty) -> Transformation(Empty, Right, CopyCell_Empty_Scanned),
    (CopyCell_Empty_Scanned, O) -> Transformation(O, Right, CopyCell_Empty_Scanned),
    (CopyCell_Empty_Scanned, I) -> Transformation(I, Right, CopyCell_Empty_Scanned),
    (CopyCell_Empty_Scanned, Empty) -> Transformation(Empty, Right, CopyCell_Empty_Scanned),
    (CopyCell_Empty_Scanned, u) -> Transformation(u, Right, CopyCell_Empty_Scanned),
    (CopyCell_Empty_Scanned, v) -> Transformation(v, Right, CopyCell_Empty_Scanned),
    (CopyCell_Empty_Scanned, w) -> Transformation(w, Right, CopyCell_Empty_Scanned),
    (CopyCell_Empty_Scanned, h) -> Transformation(h, Right, CopyCell_Empty_Scanned),
    (CopyCell_Empty_Scanned, Colon) -> Transformation(Colon, Right, CopyCell_Empty_Scanned),
    (CopyCell_Empty_Scanned, z) -> Transformation(Empty, Right, WriteCell_Empty_Scanned_E),
    (WriteCell_Empty_Scanned_E, z) -> Transformation(h, Right, WriteCell_Firstz),

    (CopyCell_Empty_Scanned_CheckIfBufferRequired, Colon) -> Transformation(Colon, Right, CopyCell_Empty_Scanned_Buffer),
    (CopyCell_Empty_Scanned_Buffer, O) -> Transformation(O, Right, CopyCell_Empty_Scanned_Buffer),
    (CopyCell_Empty_Scanned_Buffer, I) -> Transformation(I, Right, CopyCell_Empty_Scanned_Buffer),
    (CopyCell_Empty_Scanned_Buffer, Empty) -> Transformation(Empty, Right, CopyCell_Empty_Scanned_Buffer),
    (CopyCell_Empty_Scanned_Buffer, u) -> Transformation(u, Right, CopyCell_Empty_Scanned_Buffer),
    (CopyCell_Empty_Scanned_Buffer, v) -> Transformation(v, Right, CopyCell_Empty_Scanned_Buffer),
    (CopyCell_Empty_Scanned_Buffer, w) -> Transformation(w, Right, CopyCell_Empty_Scanned_Buffer),
    (CopyCell_Empty_Scanned_Buffer, h) -> Transformation(h, Right, CopyCell_Empty_Scanned_Buffer),
    (CopyCell_Empty_Scanned_Buffer, Colon) -> Transformation(Colon, Right, CopyCell_Empty_Scanned_Buffer),
    (CopyCell_Empty_Scanned_Buffer, z) -> Transformation(Empty, Right, WriteCell_Empty_Scanned_Buffer_E),
    (WriteCell_Empty_Scanned_Buffer_E, z) -> Transformation(h, Right, WriteCell_Buffer_F),
    (WriteCell_Buffer_F, Empty) -> Transformation(Empty, Right, WriteCell_Buffer_E),
    (WriteCell_Buffer_E, Empty) -> Transformation(Empty, Right, WriteCell_Firstz),

    // finish tape copy
    (ReadNextCellToCopy, Colon) -> Transformation(Colon, Right, FinishedCopyingVirtualTape),
    (FinishedCopyingVirtualTape, O) -> Transformation(O, Right, FinishedCopyingVirtualTape),
    (FinishedCopyingVirtualTape, I) -> Transformation(I, Right, FinishedCopyingVirtualTape),
    (FinishedCopyingVirtualTape, Empty) -> Transformation(Empty, Right, FinishedCopyingVirtualTape),
    (FinishedCopyingVirtualTape, h) -> Transformation(h, Right, FinishedCopyingVirtualTape),
    (FinishedCopyingVirtualTape, Colon) -> Transformation(Colon, Right, FinishedCopyingVirtualTape),
    (FinishedCopyingVirtualTape, z) -> Transformation(z, Left, FindRulesMatchingCurrentVirtualState),

    // no applicable rules found
    (NoApplicableRulesFound, O) -> Transformation(O, Right, NoApplicableRulesFound),
    (NoApplicableRulesFound, I) -> Transformation(I, Right, NoApplicableRulesFound),
    (NoApplicableRulesFound, Empty) -> Transformation(Empty, Right, NoApplicableRulesFound),
    (NoApplicableRulesFound, u) -> Transformation(Empty, Right, NoApplicableRulesFound),
    (NoApplicableRulesFound, v) -> Transformation(Empty, Right, NoApplicableRulesFound),
    (NoApplicableRulesFound, w) -> Transformation(Empty, Right, NoApplicableRulesFound),
    (NoApplicableRulesFound, x) -> Transformation(Empty, Right, NoApplicableRulesFound),
    (NoApplicableRulesFound, h) -> Transformation(Empty, Right, NoApplicableRulesFound),
    (NoApplicableRulesFound, Colon) -> Transformation(Colon, Right, NoApplicableRulesFound),
    (NoApplicableRulesFound, z) -> Transformation(z, Left, Finished)
  )

  def machineAfterNextStep(machine: Machine): Machine = {
    val currentState = machine.state
    val currentSymbol = machine.tape.currentCell.symbol
    val transformationMaybe = lookupTable.get((currentState, currentSymbol))
    if (transformationMaybe.isDefined) {
      val transformation = transformationMaybe.get
      val nextTape = applyTransformationToTape(transformation, machine.tape)
      val nextState = transformation.endingState
      Machine(nextTape, nextState)
    } else {
      machine
    }
  }

  private def applyTransformationToTape(transformation: Transformation, tape: Tape): Tape =
    transformation.move match {
      case Left =>
        val newLeft = tapePortionTail(tape.left)
        val newRight = addCellToTapePortion(Cell(transformation.write), tape.right)
        Tape(tape.left.head, newLeft, newRight)
      case Right =>
        val newRight = tapePortionTail(tape.right)
        val newLeft = addCellToTapePortion(Cell(transformation.write), tape.left)
        Tape(tape.right.head, newLeft, newRight)
    }

  private def tapePortionTail(portion: Seq[Cell]) =
    portion match {
      case cells if cells.length == 1 => Seq(Cell(Empty))
      case cells => cells.tail
    }

  private def addCellToTapePortion(toAdd: Cell, portion: Seq[Cell]) =
    portion match {
      case Seq(Cell(Empty)) => Seq(toAdd)
      case Seq(c, Cell(Empty)) => Seq(toAdd, c)
      case cells => toAdd +: cells
    }
}
